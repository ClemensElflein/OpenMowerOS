#!/bin/bash
set -euo pipefail

# ANSI helpers
ansi_info() { printf '\033[1;33m%s\033[0m\n' "$1"; }  # bold yellow
ansi_error() { printf '\033[1;31m%s\033[0m\n' "$1"; } # bold red

# Some generic vars
COMPOSE_FILE="/opt/stacks/openmower/compose.yaml"

# Build compose -f options
compose_files_opts() {
    printf '%s\n' -f "$COMPOSE_FILE"
}

usage() {
  cat <<USAGE
Usage: openmower <command> [<args>]

Commands:
  help                     Show this help.
  logs [svc...]            Tail container logs. Defaults: all services, -f --tail 100.
  pull                     Pull image(s) for the stack.
  start                    Start the stack.
  stop                     Stop the stack.
  restart                  Restart the stack.
  status|ps                Show stack status.
  shell|exec [svc] [cmd]   Exec into a service/container (default svc: openmower, default cmd: bash -l)

USAGE
}

cmd_pull() {
    ansi_info "Pulling compose stack images from $COMPOSE_FILE ..."
    mapfile -t files < <(compose_files_opts)
    exec /usr/bin/docker compose "${files[@]}" pull
}

cmd_start() {
    mapfile -t files < <(compose_files_opts)
    exec /usr/bin/docker compose "${files[@]}" up -d
}

cmd_stop() {
    mapfile -t files < <(compose_files_opts)
    exec /usr/bin/docker compose "${files[@]}" stop
}

cmd_restart() {
    mapfile -t files < <(compose_files_opts)
    exec /usr/bin/docker compose "${files[@]}" restart
}

cmd_status() {
    mapfile -t files < <(compose_files_opts)
    /usr/bin/docker compose "${files[@]}" ps
}

# Logs: default follow and show last 100 lines. Accepts optional service names.
cmd_logs() {
    local default=( -f --tail 100 )
    mapfile -t files < <(compose_files_opts)
    if [ "$#" -eq 0 ]; then
        /usr/bin/docker compose "${files[@]}" logs -f --tail 100
    else
        /usr/bin/docker compose "${files[@]}" logs "$@"
    fi
}

# Open an interactive shell inside the running container
cmd_shell() {
    # If a command is provided, execute it; otherwise open bash
    # Assume service name 'openmower' in the stack; if a different name is used, pass it as first arg
    local svc="openmower"
    if [ "$#" -gt 0 ] && ! [[ "$1" =~ ^- ]]; then
        svc="$1"; shift
    fi
    mapfile -t files < <(compose_files_opts)
    if [ "$#" -gt 0 ]; then
        exec /usr/bin/docker compose "${files[@]}" exec "$svc" "$@"
    else
        # Open a login shell so /etc/profile(.d) is processed inside the container.
        # Pass env hints so the container can set a distinct prompt if desired.
        exec /usr/bin/docker compose "${files[@]}" exec -it \
        -e STACK_SHELL=1 -e STACK_NAME='openmower' \
        "$svc" bash -l
    fi
}

main() {
    local cmd="${1:-}"
    
    case "${cmd}" in
        pull) shift || true; cmd_pull "$@" ;;
        start) shift || true; cmd_start "$@" ;;
        stop) shift || true; cmd_stop "$@" ;;
        restart) shift || true; cmd_restart "$@" ;;
        status|ps) shift || true; cmd_status "$@" ;;
        logs|clogs) shift || true; cmd_logs "$@" ;;
        shell|exec) shift || true; cmd_shell "$@" ;;
        help|--help|-h|"") usage ;;
        *)
            ansi_error "Unknown command: ${cmd}"
            usage
            exit 2
        ;;
    esac
}

main "$@"
