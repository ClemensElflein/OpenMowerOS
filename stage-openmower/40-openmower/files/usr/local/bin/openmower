#!/bin/bash
set -euo pipefail

# libbash colors/messages
if [ ! -f /usr/lib/bash/colors.sh ]; then
    echo "ERROR: libbash packet required. Please install by running 'apt install libbash'"
    exit 1
fi
source /usr/lib/bash/colors.sh

# OM Defaults (OM_VERSION, OM_REPO, ...)
if [ ! -r /etc/default/openmower ]; then
    colorPrintN Red "Missing /etc/default/openmower defaults!"
    exit 2
fi
source /etc/default/openmower

if [ -z "${OM_VERSION}" ] || [ "${OM_VERSION}" = "choose-your-version" ]; then
    colorPrintN Red "OM_VERSION is not set or still 'choose-your-version'."
    colorPrintN Yellow "Edit /etc/default/openmower and set OM_VERSION to a documented value, then run: openmower pull"
    exit 77
fi

OM_REPO="${OM_REPO:-ghcr.io/clemenselflein/open_mower_ros}"
OM_CONTAINER="${OM_CONTAINER:-openmower}"

# Compose detection (stack managed under /opt/stacks/openmower)
OM_STACK_DIR="${OM_STACK_DIR:-/opt/stacks/openmower}"
COMPOSE_FILE=""
if [ -d "$OM_STACK_DIR" ]; then
    if [ -f "$OM_STACK_DIR/compose.yaml" ]; then
        COMPOSE_FILE="$OM_STACK_DIR/compose.yaml"
        elif [ -f "$OM_STACK_DIR/docker-compose.yml" ]; then
        COMPOSE_FILE="$OM_STACK_DIR/docker-compose.yml"
    fi
fi
COMPOSE_MODE=0
[ -n "$COMPOSE_FILE" ] && COMPOSE_MODE=1

# Build compose -f options, including debug override when requested and present
compose_files_opts() {
    local opts=( -f "$COMPOSE_FILE" )
    case "$OM_DEBUG" in
        [Tt][Rr][Uu][Ee]|1|[Yy][Ee][Ss])
            if [ -f "$OM_STACK_DIR/compose.debug.yaml" ]; then
                opts+=( -f "$OM_STACK_DIR/compose.debug.yaml" )
            fi
        ;;
    esac
    printf '%s\n' "${opts[@]}"
}

usage() {
  cat <<USAGE
Usage: openmower <command> [<args>]

Commands:
  help                   Show this help
    logs                   Show service logs (systemd/journal). Pass -f to follow.
    container-logs|clogs   Show container logs (docker or compose). Defaults to follow.
    pull                   Pull container image(s). Uses compose when a stack exists.
    restart                Restart the OpenMower unit
    start                  Start the OpenMower unit
    status                 Show the OpenMower unit status
    stop                   Stop the OpenMower unit
    shell|exec             Open a shell inside the running container

USAGE
}

cmd_pull() {
    if [ $COMPOSE_MODE -eq 1 ]; then
        colorPrintN Yellow "Pulling compose stack images from $COMPOSE_FILE ..."
        # Pass OM_IMAGE to match systemd unit behavior
        export OM_IMAGE="${OM_IMAGE:-${OM_REPO}:${OM_VERSION}}"
        # Gather -f options (include debug override when OM_DEBUG is true)
        mapfile -t files < <(compose_files_opts)
        exec /usr/bin/docker compose "${files[@]}" pull
    else
        local image
        image="${OM_IMAGE:-${OM_REPO}:${OM_VERSION}}"
        colorPrintN Yellow "Pulling ${image} ..."
        exec /usr/bin/docker pull "${image}"
    fi
}

_unit_name() {
    echo "openmower.service"
}

cmd_start() { systemctl start "$(_unit_name)"; }
cmd_stop() { systemctl stop "$(_unit_name)"; }
cmd_restart() { systemctl restart "$(_unit_name)"; }
cmd_status() { systemctl status --no-pager "$(_unit_name)"; }

# Service logs (journal). If no args, show last 200 lines; otherwise pass through.
cmd_logs() {
    local unit
    unit="$(_unit_name)"
    if [ "$#" -eq 0 ]; then
        journalctl -u "$unit" -n 200 --no-pager
    else
        journalctl -u "$unit" --no-pager "$@"
    fi
}

# Container logs (docker). By default follow and show last 100 lines.
cmd_container_logs() {
    local default=( -f --tail 100 )
    if [ $COMPOSE_MODE -eq 1 ]; then
        if [ "$#" -eq 0 ]; then
            mapfile -t files < <(compose_files_opts)
            /usr/bin/docker compose "${files[@]}" logs -f --tail 100
        else
            mapfile -t files < <(compose_files_opts)
            /usr/bin/docker compose "${files[@]}" logs "$@"
        fi
    else
        if [ "$#" -eq 0 ]; then
            /usr/bin/docker logs "${default[@]}" "${OM_CONTAINER}"
        else
            /usr/bin/docker logs "$@" "${OM_CONTAINER}"
        fi
    fi
}

# Open an interactive shell inside the running container
cmd_shell() {
    # If a command is provided, execute it; otherwise open bash
    if [ $COMPOSE_MODE -eq 1 ]; then
        # Assume service name 'openmower' in the stack; if a different name is used, pass it as first arg
        local svc="openmower"
        if [ "$#" -gt 0 ] && ! [[ "$1" =~ ^- ]]; then
            svc="$1"; shift
        fi
        mapfile -t files < <(compose_files_opts)
        if [ "$#" -gt 0 ]; then
            exec /usr/bin/docker compose "${files[@]}" exec "$svc" "$@"
        else
            exec /usr/bin/docker compose "${files[@]}" exec "$svc" /bin/bash -l
        fi
    else
        if /usr/bin/docker ps --format '{{.Names}}' | grep -qx "${OM_CONTAINER}"; then
            if [ "$#" -gt 0 ]; then
                exec /usr/bin/docker exec -it "${OM_CONTAINER}" "$@"
            else
                exec /usr/bin/docker exec -it "${OM_CONTAINER}" /bin/bash -l
            fi
        else
            colorPrintN Red "Container '${OM_CONTAINER}' is not running."
            colorPrintN Yellow "Start it with: systemctl start openmower.service"
            exit 3
        fi
    fi
}

main() {
    local cmd="${1:-}"
    
    case "${cmd}" in
        pull) shift || true; cmd_pull "$@" ;;
        start) shift || true; cmd_start "$@" ;;
        stop) shift || true; cmd_stop "$@" ;;
        restart) shift || true; cmd_restart "$@" ;;
        status) shift || true; cmd_status "$@" ;;
        logs) shift || true; cmd_logs "$@" ;;
        container-logs|clogs|docker-logs|dlogs) shift || true; cmd_container_logs "$@" ;;
        shell|exec) shift || true; cmd_shell "$@" ;;
        help|--help|-h|"") usage ;;
        *)
            colorPrintN Red "Unknown command: ${cmd}"
            usage
            exit 2
        ;;
    esac
}

main "$@"
