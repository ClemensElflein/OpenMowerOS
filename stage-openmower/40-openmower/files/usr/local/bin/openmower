#!/bin/bash
set -euo pipefail

# libbash colors/messages
if [ ! -f /usr/lib/bash/colors.sh ]; then
    echo "ERROR: libbash packet required. Please install by running 'apt install libbash'"
    exit 1
fi
source /usr/lib/bash/colors.sh

# OM Config
if [ ! -r /etc/default/openmower ]; then
    colorPrintN Red "Missing /etc/default/openmower defaults!"
    exit 2
fi
source /etc/default/openmower

if [ -z "${OM_VERSION}" ] || [ "${OM_VERSION}" = "choose-your-version" ]; then
    colorPrintN Red "OM_VERSION is not set or still 'choose-your-version'."
    colorPrintN Yellow "Edit /etc/default/openmower and set OM_VERSION to a documented value, then run: openmower pull"
    exit 77
fi

OM_REPO="${OM_REPO:-ghcr.io/clemenselflein/open_mower_ros}"
OM_CONTAINER="${OM_CONTAINER:-openmower}"

usage() {
  cat <<USAGE
Usage: openmower <command> [<args>]

Commands:
  help           Show this help
  logs           Show service logs (systemd/journal). Pass -f to follow.
  container-logs Show container logs (docker). Defaults to follow.
  pull           Pull the configured container image (requires OM_VERSION)
  restart        Restart the openmower systemd service
  start          Start the openmower systemd service
  status         Show the openmower systemd status
  stop           Stop the openmower systemd service
  shell|exec     Open an interactive shell inside the running container

USAGE
}

cmd_pull() {
    ensure_version_set
    local image
    image="${OM_IMAGE:-${OM_REPO}:${OM_VERSION}}"
    colorPrintN Yellow "Pulling ${image} ..."
    exec /usr/bin/docker pull "${image}"
}

cmd_start() { systemctl start openmower.service; }
cmd_stop() { systemctl stop openmower.service; }
cmd_restart() { systemctl restart openmower.service; }
cmd_status() { systemctl status --no-pager openmower.service; }

# Service logs (journal). If no args, show last 200 lines; otherwise pass through.
cmd_logs() {
    if [ "$#" -eq 0 ]; then
        journalctl -u openmower.service -n 200 --no-pager
    else
        journalctl -u openmower.service --no-pager "$@"
    fi
}

# Container logs (docker). By default follow and show last 100 lines.
cmd_container_logs() {
    local default=( -f --tail 100 )
    if [ "$#" -eq 0 ]; then
        /usr/bin/docker logs "${default[@]}" "${OM_CONTAINER}"
    else
        /usr/bin/docker logs "$@" "${OM_CONTAINER}"
    fi
}

# Open an interactive shell inside the running container
cmd_shell() {
    # If a command is provided, execute it; otherwise open bash
    if /usr/bin/docker ps --format '{{.Names}}' | grep -qx "${OM_CONTAINER}"; then
        if [ "$#" -gt 0 ]; then
            exec /usr/bin/docker exec -it "${OM_CONTAINER}" "$@"
        else
            exec /usr/bin/docker exec -it "${OM_CONTAINER}" /bin/bash -l
        fi
    else
        colorPrintN Red "Container '${OM_CONTAINER}' is not running."
        colorPrintN Yellow "Start it with: systemctl start openmower.service"
        exit 3
    fi
}

main() {
    local cmd="${1:-}"
    
    case "${cmd}" in
        pull) shift || true; cmd_pull "$@" ;;
        start) shift || true; cmd_start "$@" ;;
        stop) shift || true; cmd_stop "$@" ;;
        restart) shift || true; cmd_restart "$@" ;;
        status) shift || true; cmd_status "$@" ;;
        logs) shift || true; cmd_logs "$@" ;;
        container-logs|container_logs|docker-logs) shift || true; cmd_container_logs "$@" ;;
        shell|exec) shift || true; cmd_shell "$@" ;;
        help|--help|-h|"") usage ;;
        *)
            colorPrintN Red "Unknown command: ${cmd}"
            usage
            exit 2
        ;;
    esac
}

main "$@"
